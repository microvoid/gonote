// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts  Account[]
  sessions  Session[]
  projects  ProjectUsers[]
  createdAt DateTime       @default(now())

  SentEmail SentEmail[]
  Post      Post[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id   String  @id @default(cuid())
  name String
  slug String  @unique
  logo String?

  users             ProjectUsers[]
  usage             Int            @default(0)
  usageLimit        Int            @default(1000)
  plan              String         @default("free")
  stripeId          String?        @unique // Stripe subscription ID
  billingCycleStart Int? // day of the month when the billing cycle starts

  Post      Post[]
  tags      Tag[]
  SentEmail SentEmail[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProjectUsers {
  id        String   @id @default(cuid())
  role      String   @default("member")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  @@unique([userId, projectId])
  @@index([projectId])
}

model Post {
  id          String          @id @default(cuid())
  slug        String?
  title       String?
  html        String?         @db.LongText
  markdown    String          @db.LongText
  image       String?
  publicStats PostPublicStats @default(public)

  project   Project? @relation(fields: [projectId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  projectId String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  clicks Int @default(0) // number of clicks

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PostPublicStats {
  public
  private
}

model Tag {
  id        String   @id @default(cuid())
  name      String
  color     String   @default("blue")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project   Project @relation(fields: [projectId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  projectId String

  @@unique([name, projectId])
  @@index(projectId)
}

enum EmailType {
  firstDomainInvalidEmail
  secondDomainInvalidEmail
  firstUsageLimitEmail
  secondUsageLimitEmail
}

model SentEmail {
  id        String    @id @default(cuid())
  type      EmailType
  createdAt DateTime  @default(now())
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
  project   Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String?

  @@index([userId])
  @@index([projectId])
}
